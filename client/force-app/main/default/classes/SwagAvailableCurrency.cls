/*
 * currencyapi
 * The currency APIs help you retrieve exchange rates and convert prices between currencies easily.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Details of a specific currency
 */
public class SwagAvailableCurrency implements Swagger.MappedProperties {
    /**
     * ISO 4217 currency three-letter code associated with the country
     * @return isOCurrencyCode
     */
    public String isOCurrencyCode { get; set; }

    /**
     * Symbol associated with the currency
     * @return currencySymbol
     */
    public String currencySymbol { get; set; }

    /**
     * Full name of the currency
     * @return currencyEnglishName
     */
    public String currencyEnglishName { get; set; }

    /**
     * Name of the country
     * @return countryName
     */
    public String countryName { get; set; }

    /**
     * Three-letter ISO 3166-1 country code
     * @return countryThreeLetterCode
     */
    public String countryThreeLetterCode { get; set; }

    /**
     * Two-letter ISO 3166-1 country code
     * @return countryISOTwoLetterCode
     */
    public String countryISOTwoLetterCode { get; set; }

    /**
     * True if this country is currently a member of the European Union (EU), false otherwise
     * @return isEuropeanUnionMember
     */
    public Boolean isEuropeanUnionMember { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'ISOCurrencyCode' => 'isOCurrencyCode',
        'CurrencySymbol' => 'currencySymbol',
        'CurrencyEnglishName' => 'currencyEnglishName',
        'CountryName' => 'countryName',
        'CountryThreeLetterCode' => 'countryThreeLetterCode',
        'CountryISOTwoLetterCode' => 'countryISOTwoLetterCode',
        'IsEuropeanUnionMember' => 'isEuropeanUnionMember'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagAvailableCurrency getExample() {
        SwagAvailableCurrency availableCurrency = new SwagAvailableCurrency();
        availableCurrency.isOCurrencyCode = 'aeiou';
        availableCurrency.currencySymbol = 'aeiou';
        availableCurrency.currencyEnglishName = 'aeiou';
        availableCurrency.countryName = 'aeiou';
        availableCurrency.countryThreeLetterCode = 'aeiou';
        availableCurrency.countryISOTwoLetterCode = 'aeiou';
        availableCurrency.isEuropeanUnionMember = true;
        return availableCurrency;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagAvailableCurrency) {
            SwagAvailableCurrency availableCurrency = (SwagAvailableCurrency) obj;
            return this.isOCurrencyCode == availableCurrency.isOCurrencyCode
                && this.currencySymbol == availableCurrency.currencySymbol
                && this.currencyEnglishName == availableCurrency.currencyEnglishName
                && this.countryName == availableCurrency.countryName
                && this.countryThreeLetterCode == availableCurrency.countryThreeLetterCode
                && this.countryISOTwoLetterCode == availableCurrency.countryISOTwoLetterCode
                && this.isEuropeanUnionMember == availableCurrency.isEuropeanUnionMember;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (isOCurrencyCode == null ? 0 : System.hashCode(isOCurrencyCode));
        hashCode = (17 * hashCode) + (currencySymbol == null ? 0 : System.hashCode(currencySymbol));
        hashCode = (17 * hashCode) + (currencyEnglishName == null ? 0 : System.hashCode(currencyEnglishName));
        hashCode = (17 * hashCode) + (countryName == null ? 0 : System.hashCode(countryName));
        hashCode = (17 * hashCode) + (countryThreeLetterCode == null ? 0 : System.hashCode(countryThreeLetterCode));
        hashCode = (17 * hashCode) + (countryISOTwoLetterCode == null ? 0 : System.hashCode(countryISOTwoLetterCode));
        hashCode = (17 * hashCode) + (isEuropeanUnionMember == null ? 0 : System.hashCode(isEuropeanUnionMember));
        return hashCode;
    }
}

